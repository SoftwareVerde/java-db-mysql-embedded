plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

group = 'com.softwareverde'
version = '3.3.1'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    serverImplementation.extendsFrom implementation
    serverRuntimeOnly.extendsFrom runtimeOnly

    testImplementation.extendsFrom serverImplementation
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // implementation fileTree(dir: 'libs', include: ['*.jar'])

    api             group: 'com.github.softwareverde',  name: 'java-db-mysql',          version: 'v4.3.1'
    implementation  group: 'com.github.softwareverde',  name: 'java-util',              version: 'v2.7.8'

    // OS-Specific Prebuilt Binaries: (not mutually exclusive)
    // serverImplementation    group: 'com.github.softwareverde',  name: 'java-mariadb-osx',       version: 'v10.8.3'
    // serverImplementation    group: 'com.github.softwareverde',  name: 'java-mariadb-windows',   version: 'v10.5.9'
    // serverImplementation    group: 'com.github.softwareverde',  name: 'java-mariadb-linux',     version: 'v10.8.3'

    testImplementation  group: 'junit', name: 'junit', version: '4.13.2'
}

sourceSets {
    main {
        java
        resources
    }
    server {
        java
        resources

        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    test {
        java
        resources

        compileClasspath += sourceSets.server.output
        runtimeClasspath += sourceSets.server.output
    }
}

task copyDependencies(type: Copy) {
    from (configurations.compileClasspath + configurations.runtimeClasspath)
    into "$buildDir/libs/libs"

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task makeServerJar(type: Jar) {
    manifest {
        attributes  'Implementation-Title': 'Java MySQL Embedded Database',
                    'Implementation-Version': archiveVersion,
                    'Main-Class': 'com.softwareverde.database.mysql.embedded.Main',
                    'Class-Path': (project.configurations.serverCompileClasspath + project.configurations.serverRuntimeClasspath).collect { 'libs/' + it.getName() }.join(' ')
    }

    archiveBaseName = project.name + '-server'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from sourceSets.server.output

    with jar
}

task makeJar(type: Jar) {
    manifest {
        attributes  'Implementation-Title': 'Java MySQL Embedded Database',
                    'Implementation-Version': archiveVersion
    }

    archiveBaseName = project.name

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    with jar
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (! desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
